{"ast":null,"code":"var _jsxFileName = \"/home/sobhan/Desktop/reacttest/src/fetching.js\";\nimport React from \"react\";\nimport Displaying from './displaying';\nimport Switching from './switching';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Fetching extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      actors: '',\n      sensors: '',\n      loading: true\n    };\n    this.handler = this.handler.bind(this);\n  }\n\n  async componentDidMount() {\n    const apiUrl1 = 'http://webswitch.ir:3000/actors';\n    const response = await fetch(apiUrl1);\n    const data1 = await response.json();\n    this.setState({\n      actors: data1.actors\n    });\n    const apiUrl2 = 'http://webswitch.ir:3000/sensors';\n    const response2 = await fetch(apiUrl2);\n    const data2 = await response2.json();\n    this.setState({\n      sensors: data2.sensors,\n      loading: false\n    });\n  }\n\n  handler(id, status) {\n    var newstatus = status == 1 ? 0 : 1;\n    console.log(status, 'this is status');\n    console.log(newstatus, 'this is newstatus');\n    console.log('talaaaaaa', this.state.actors);\n    this.forceUpdate();\n    this.switch(id, newstatus);\n  }\n\n  async switch(id, newstatus) {\n    const apiUrl1 = 'http://webswitch.ir:3000/actors';\n    console.log(' pooooooooooooooooost ', id, newstatus);\n    const response = await fetch(apiUrl1, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        'actorid': 0,\n        'actorstatus': 0\n      })\n    });\n    const data1 = await response.json();\n    console.log(data1);\n  }\n\n  render() {\n    if (this.state.loading) {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"loading ....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this);\n    }\n\n    ;\n\n    if (this.state.sensors) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-striped\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"#\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Percentage\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: this.state.sensors.map((sensor, i) => /*#__PURE__*/_jsxDEV(Displaying, {\n              sensor: sensor\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 63\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-striped\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"#\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Switch\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: this.state.actors.map((actor, i) => /*#__PURE__*/_jsxDEV(Switching, {\n              actor: actor,\n              handler: this.handler\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 61\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 18\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this);\n    }\n\n    ;\n  }\n\n}","map":{"version":3,"sources":["/home/sobhan/Desktop/reacttest/src/fetching.js"],"names":["React","Displaying","Switching","Fetching","Component","constructor","props","state","actors","sensors","loading","handler","bind","componentDidMount","apiUrl1","response","fetch","data1","json","setState","apiUrl2","response2","data2","id","status","newstatus","console","log","forceUpdate","switch","method","headers","body","JSON","stringify","render","map","sensor","i","actor"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Displaying from './displaying'\nimport Switching from './switching'\n\nexport default class Fetching extends React.Component{\n    constructor(props){\n    super(props);\n    this.state={\n        actors:'',\n        sensors:'',\n        loading:true,\n    }\n    this.handler = this.handler.bind(this)\n\n}\n    async componentDidMount(){\n        const apiUrl1 = 'http://webswitch.ir:3000/actors';\n        const response = await fetch(apiUrl1);\n        const data1 = await response.json();\n        this.setState({actors:data1.actors})\n\n        const apiUrl2 = 'http://webswitch.ir:3000/sensors';\n        const response2 = await fetch(apiUrl2);\n        const data2 = await response2.json();\n        this.setState({sensors:data2.sensors,\n                     loading: false})\n    };\n    handler(id, status) {\n  \n        var newstatus= status==1 ? 0 : 1\n        console.log(status, 'this is status')\n        console.log(newstatus, 'this is newstatus')\n\n        console.log('talaaaaaa', this.state.actors)\n        this.forceUpdate()\n        \n        \n        this.switch(id, newstatus)\n        \n\n      }\n      async switch(id , newstatus){\n        const apiUrl1 = 'http://webswitch.ir:3000/actors';\n        console.log (' pooooooooooooooooost ', id , newstatus)\n        const response = await fetch(apiUrl1,{ method:'POST', headers:{'Content-type':'application/json', 'Accept':'application/json'}, body:JSON.stringify({'actorid': 0, 'actorstatus':0})});\n        const data1 = await response.json();\n        console.log(data1)\n\n\n    };\n    render(){\n    if (this.state.loading){\n        return(\n            <h1>loading ....</h1>\n        )};\n    if (this.state.sensors) {\n        return(\n            <div>\n                <table className=\"table table-striped\">\n                <thead>\n                    <tr>\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\">Name</th>\n                    <th scope=\"col\">Percentage</th>\n                    </tr>\n                </thead>\n                <tbody>\n                        {this.state.sensors.map((sensor,i) => <Displaying key={i} sensor={sensor}/>)}\n                 </tbody>\n                 </table>\n                 <table className=\"table table-striped\">\n                <thead>\n                    <tr>\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\">Name</th>\n                    <th scope=\"col\">Switch</th>\n                    </tr>\n                </thead>\n                <tbody>\n                        {this.state.actors.map((actor,i) => <Switching key={i} actor={actor} handler={this.handler} />)}\n                 </tbody>\n                 </table>\n            </div>\n        )\n\n    };\n}\n}\n"]},"metadata":{},"sourceType":"module"}