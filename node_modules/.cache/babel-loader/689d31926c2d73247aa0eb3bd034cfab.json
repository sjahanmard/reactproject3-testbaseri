{"ast":null,"code":"var _jsxFileName = \"/home/sobhan/Desktop/reacttest/src/displaying.js\";\nimport React from \"react\"; // var gaugeElement = document.querySelector(\".gauge\");\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Displaying extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  //  setGaugeValue( value) {\n  //   if (value < 0 || value > 1) {\n  //     return;\n  //   }\n  //   gaugeElement.querySelector(\".gauge__fill\").style.transform = `rotate(${\n  //     value / 2\n  //   }turn)`;\n  //   gaugeElement.querySelector(\".gauge__cover\").textContent = `${Math.round(\n  //     value * 100\n  //   )}%`;\n  // }\n  render() {\n    console.log(this.props.sensor.sensordata, 'this is it');\n    this.setGaugeValue(this.props.sensor.sensordata / 100);\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n        scope: \"row\",\n        children: this.props.sensor.sensorid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: this.props.sensor.sensorname\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"gauge\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"gauge__body\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"gauge__fill\",\n              style: {\n                transform: `rotate(${0.8 / 2}turn)`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"gauge__cover\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/sobhan/Desktop/reacttest/src/displaying.js"],"names":["React","Displaying","Component","constructor","props","render","console","log","sensor","sensordata","setGaugeValue","sensorid","sensorname","transform"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAOA;;;AAGA,eAAe,MAAMC,UAAN,SAAyBD,KAAK,CAACE,SAA/B,CAAwC;AACrDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAEjB,UAAMA,KAAN;AACC;;AACD;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEAC,EAAAA,MAAM,GAAE;AACNC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,KAAL,CAAWI,MAAX,CAAkBC,UAA9B,EAA0C,YAA1C;AACA,SAAKC,aAAL,CAAoB,KAAKN,KAAL,CAAWI,MAAX,CAAkBC,UAAlB,GAA6B,GAAjD;AAEA,wBACE;AAAA,8BACA;AAAI,QAAA,KAAK,EAAC,KAAV;AAAA,kBAAiB,KAAKL,KAAL,CAAWI,MAAX,CAAkBG;AAAnC;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAA,kBAAK,KAAKP,KAAL,CAAWI,MAAX,CAAkBI;AAAvB;AAAA;AAAA;AAAA;AAAA,cAFA,eAWA;AAAA,+BACM;AAAK,UAAA,KAAK,EAAC,OAAX;AAAA,iCACF;AAAK,YAAA,KAAK,EAAC,aAAX;AAAA,oCACE;AAAK,cAAA,KAAK,EAAC,aAAX;AAAyB,cAAA,KAAK,EAAE;AAACC,gBAAAA,SAAS,EAAE,UAAS,MAAM,CAAE;AAA7B;AAAhC;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAK,cAAA,KAAK,EAAC;AAAX;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADE;AAAA;AAAA;AAAA;AAAA;AADN;AAAA;AAAA;AAAA;AAAA,cAXA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAuBL;;AA9CsD","sourcesContent":["import React from \"react\";\n\n\n\n\n\n\n// var gaugeElement = document.querySelector(\".gauge\");\n\n\nexport default class Displaying extends React.Component{\n  constructor(props) {\n\n    super(props);\n    };\n    //  setGaugeValue( value) {\n    //   if (value < 0 || value > 1) {\n    //     return;\n    //   }\n    \n    //   gaugeElement.querySelector(\".gauge__fill\").style.transform = `rotate(${\n    //     value / 2\n    //   }turn)`;\n\n    //   gaugeElement.querySelector(\".gauge__cover\").textContent = `${Math.round(\n    //     value * 100\n    //   )}%`;\n    // }\n\n    render(){\n      console.log(this.props.sensor.sensordata, 'this is it')\n      this.setGaugeValue( this.props.sensor.sensordata/100);\n\n      return (\n        <tr>\n        <th scope=\"row\">{this.props.sensor.sensorid}</th>\n        <td>{this.props.sensor.sensorname}</td>\n        {/* <td>\n        <div className=\"progress\">\n          <div className=\"progress-bar\" role=\"progressbar\" aria-valuenow={this.props.sensor.sensordata}\n              aria-valuemin=\"0\" aria-valuemax=\"100\" style={{width:`${this.props.sensor.sensordata}%`}}>\n              {this.props.sensor.sensordata} %\n          </div>\n        </div>        \n        </td> */}\n        <td>\n              <div class=\"gauge\">\n            <div class=\"gauge__body\">\n              <div class=\"gauge__fill\" style={{transform:`rotate(${0.8 / 2}turn)`}}></div>\n              <div class=\"gauge__cover\"></div>\n            </div>\n          </div>\n        </td>\n\n      </tr>\n      );\n}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}