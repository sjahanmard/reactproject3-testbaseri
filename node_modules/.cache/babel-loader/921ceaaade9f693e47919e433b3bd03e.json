{"ast":null,"code":"var _jsxFileName = \"/home/sobhan/Desktop/reacttest/src/fetching.js\",\n    _s = $RefreshSig$();\n\nimport react from \"react\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport Displaying from './displaying';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Fetching = () => {\n  _s();\n\n  const [actorsDatetime, setActorsDatetime] = useState('');\n  const [actors, setActors] = useState(null);\n  const [sensors, setSensors] = useState(null);\n  const [userID] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [sensorsDatetime, setSensorsDatetime] = useState('');\n  useEffect(() => {\n    const apiUrl1 = 'http://webswitch.ir:3000/actors';\n    fetch(apiUrl1).then(response => response.json()).then(data1 => {\n      setActors(data1.actors);\n      setActorsDatetime(data1.datetime);\n    });\n    const apiUrl2 = 'http://webswitch.ir:3000/sensors';\n    fetch(apiUrl2).then(response => response.json()).then(data2 => {\n      setSensors(data2.sensors);\n      setSensorsDatetime(data2.datetime);\n      setLoading(false);\n    });\n    console.log(1);\n  }, [userID]);\n\n  if (loading) {\n    console.log(2);\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"loading ....\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this);\n  }\n\n  ;\n\n  if (sensors) {\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      class: \"table table-striped\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"#\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"First\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"Last\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"Handle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: sensors.map((sensor, i) => /*#__PURE__*/_jsxDEV(Displaying, {\n          sensor: sensor\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 52\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }, this);\n  }\n\n  ;\n};\n\n_s(Fetching, \"68zvIYsXdXgdb4Zp/9MRubFbqN8=\");\n\n_c = Fetching;\nexport default Fetching;\n\nvar _c;\n\n$RefreshReg$(_c, \"Fetching\");","map":{"version":3,"sources":["/home/sobhan/Desktop/reacttest/src/fetching.js"],"names":["react","useEffect","useState","Displaying","Fetching","actorsDatetime","setActorsDatetime","actors","setActors","sensors","setSensors","userID","loading","setLoading","sensorsDatetime","setSensorsDatetime","apiUrl1","fetch","then","response","json","data1","datetime","apiUrl2","data2","console","log","map","sensor","i"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCJ,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACS,MAAD,IAAWT,QAAQ,CAAC,CAAD,CAAzB;AACA,QAAM,CAACU,OAAD,EAAWC,UAAX,IAAyBX,QAAQ,CAAC,IAAD,CAAvC;AACA,QAAM,CAACY,eAAD,EAAkBC,kBAAlB,IAAwCb,QAAQ,CAAC,EAAD,CAAtD;AACAD,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMe,OAAO,GAAG,iCAAhB;AACAC,IAAAA,KAAK,CAAED,OAAF,CAAL,CACCE,IADD,CACQC,QAAD,IAAaA,QAAQ,CAACC,IAAT,EADpB,EAECF,IAFD,CAESG,KAAD,IAAW;AAACb,MAAAA,SAAS,CAACa,KAAK,CAACd,MAAP,CAAT;AAChBD,MAAAA,iBAAiB,CAACe,KAAK,CAACC,QAAP,CAAjB;AACH,KAJD;AAQA,UAAMC,OAAO,GAAG,kCAAhB;AACAN,IAAAA,KAAK,CAAEM,OAAF,CAAL,CACCL,IADD,CACQC,QAAD,IAAaA,QAAQ,CAACC,IAAT,EADpB,EAECF,IAFD,CAESM,KAAD,IAAW;AAACd,MAAAA,UAAU,CAACc,KAAK,CAACf,OAAP,CAAV;AACAM,MAAAA,kBAAkB,CAACS,KAAK,CAACF,QAAP,CAAlB;AACAT,MAAAA,UAAU,CAAC,KAAD,CAAV;AAAkB,KAJtC;AAKAY,IAAAA,OAAO,CAACC,GAAR,CAAa,CAAb;AACH,GAjBQ,EAiBP,CAACf,MAAD,CAjBO,CAAT;;AAkBA,MAAIC,OAAJ,EAAY;AACRa,IAAAA,OAAO,CAACC,GAAR,CAAY,CAAZ;AACA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAEE;;AAAA;;AACN,MAAIjB,OAAJ,EAAa;AACT,wBACQ;AAAO,MAAA,KAAK,EAAC,qBAAb;AAAA,8BACA;AAAA,+BACI;AAAA,kCACA;AAAI,YAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,eAEA;AAAI,YAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFA,eAGA;AAAI,YAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHA,eAIA;AAAI,YAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADA,eASA;AAAA,kBACSA,OAAO,CAACkB,GAAR,CAAY,CAACC,MAAD,EAAQC,CAAR,kBAAc,QAAC,UAAD;AAAoB,UAAA,MAAM,EAAED;AAA5B,WAAiBC,CAAjB;AAAA;AAAA;AAAA;AAAA,gBAA1B;AADT;AAAA;AAAA;AAAA;AAAA,cATA;AAAA;AAAA;AAAA;AAAA;AAAA,YADR;AAgBH;;AAAA;AAEJ,CAjDD;;GAAMzB,Q;;KAAAA,Q;AAmDN,eAAeA,QAAf","sourcesContent":["import react from \"react\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport Displaying from './displaying'\n\nconst Fetching = () => {\n    const [actorsDatetime, setActorsDatetime] = useState('')\n    const [actors, setActors] = useState(null)\n    const [sensors, setSensors] = useState(null)\n    const [userID] = useState(0) \n    const [loading , setLoading] = useState(true)\n    const [sensorsDatetime, setSensorsDatetime] = useState('')                                           \n    useEffect(()=>{\n        const apiUrl1 = 'http://webswitch.ir:3000/actors'\n        fetch (apiUrl1)\n        .then ((response)=> response.json())\n        .then  ((data1) => {setActors(data1.actors);\n            setActorsDatetime(data1.datetime)            \n        })\n\n\n\n        const apiUrl2 = 'http://webswitch.ir:3000/sensors'\n        fetch (apiUrl2)\n        .then ((response)=> response.json())\n        .then  ((data2) => {setSensors(data2.sensors);\n                            setSensorsDatetime(data2.datetime);\n                            setLoading(false)});\n        console.log (1)\n    },[userID])\n    if (loading){\n        console.log(2);\n        return(\n            <h1>loading ....</h1>\n        )};\n    if (sensors) {\n        return(\n                <table class=\"table table-striped\">\n                <thead>\n                    <tr>\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\">First</th>\n                    <th scope=\"col\">Last</th>\n                    <th scope=\"col\">Handle</th>\n                    </tr>\n                </thead>\n                <tbody>\n                        {sensors.map((sensor,i) => <Displaying key={i} sensor={sensor}/>)}\n                 </tbody>\n                 </table>\n        )\n\n    };\n\n}\n \nexport default Fetching;"]},"metadata":{},"sourceType":"module"}